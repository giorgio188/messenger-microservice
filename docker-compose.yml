services:

  auth_user_friends_db:
      image: postgres:17
      container_name: auth_user_friends_db
      environment:
        - POSTGRES_DB=${DB_USER_NAME}
        - POSTGRES_USER=${DB_USER_USERNAME}
        - POSTGRES_PASSWORD=${DB_USER_PASSWORD}
        - POSTGRES_ADMIN_PASSWORD=${POSTGRES_PASSWORD}
      ports:
        - "5432:5432"
      volumes:
        - db_data:/var/lib/postgresql/data
        - ./user-service.sql:/docker-entrypoint-initdb.d/init.sql
      networks:
        - microservices-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-network
    depends_on:
      - auth_user_friends_db

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USER_URL=jdbc:postgresql://auth_user_friends_db:5432/${DB_USER_NAME}
      - DB_USER_USERNAME=${DB_USER_USERNAME}
      - DB_USER_PASSWORD=${DB_USER_PASSWORD}

      - JWT_SECRET=${JWT_SECRET}
    networks:
      - microservices-network
    depends_on:
      - auth_user_friends_db

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USER_URL=jdbc:postgresql://auth_user_friends_db:5432/${DB_USER_NAME}
      - DB_USER_USERNAME=${DB_USER_USERNAME}
      - DB_USER_PASSWORD=${DB_USER_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_BUCKET=${AWS_BUCKET}
    networks:
      - microservices-network
    depends_on:
      - auth_user_friends_db

networks:
  microservices-network:
    driver: bridge

volumes:
  db_data: