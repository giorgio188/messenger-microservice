version: '3.8'

services:

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - REDIS_HOST=${MAIN_REDIS_HOST}
      - REDIS_PORT=${MAIN_REDIS_PORT}
      - REDIS_PASSWORD=${MAIN_REDIS_PASSWORD}
    networks:
      - microservices-network
    depends_on:
      - auth_user_friends_db
      - redis

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USER_URL=${DB_USER_URL}
      - DB_USER_USERNAME=${DB_USER_USERNAME}
      - DB_USER_PASSWORD=${DB_USER_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - REDIS_HOST=${MAIN_REDIS_HOST}
      - REDIS_PORT=${MAIN_REDIS_PORT}
      - REDIS_PASSWORD=${MAIN_REDIS_PASSWORD}
    networks:
      - microservices-network
    depends_on:
      - auth_user_friends_db
      - redis
      - api-gateway

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_USER_URL=${DB_USER_URL}
      - DB_USER_USERNAME=${DB_USER_USERNAME}
      - DB_USER_PASSWORD=${DB_USER_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_BUCKET=${AWS_BUCKET}
      - PRESENCE_SERVICE_URL=${PRESENCE_SERVICE_URL}
    networks:
      - microservices-network
    depends_on:
      - auth_user_friends_db
      - redis
      - api-gateway

  chat-service:
      build:
        context: ./chat-service
        dockerfile: Dockerfile
      ports:
        - "8083:8083"
      environment:
        - SPRING_PROFILES_ACTIVE=docker
        - DB_CHATS_URL=${DB_CHATS_URL}
        - DB_CHATS_USERNAME=${DB_CHATS_USERNAME}
        - DB_CHATS_PASSWORD=${DB_CHATS_PASSWORD}
        - JWT_SECRET=${JWT_SECRET}
        - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
        - AWS_SECRET_KEY=${AWS_SECRET_KEY}
        - AWS_REGION=${AWS_REGION}
        - AWS_BUCKET=${AWS_BUCKET}
        - ENCRYPTION_PASSWORD=${ENCRYPTION_PASSWORD}
        - ENCRYPTION_SALT=${ENCRYPTION_SALT}
        - PRESENCE_SERVICE_URL=${PRESENCE_SERVICE_URL}
        - REDIS_HOST=${MAIN_REDIS_HOST}
        - REDIS_PORT=${MAIN_REDIS_PORT}
        - REDIS_PASSWORD=${MAIN_REDIS_PASSWORD}
      networks:
        - microservices-network
      depends_on:
        - chats_db
        - redis
        - api-gateway

  presence-service:
    build:
      context: ./presence-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - GATEWAY_URL=${GATEWAY_URL}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - REDIS_HOST=${PRESENCE_REDIS_HOST}
      - REDIS_PORT=${PRESENCE_REDIS_PORT}
      - REDIS_PASSWORD=${PRESENCE_REDIS_PASSWORD}
    networks:
      - microservices-network
    depends_on:
      - redis_presence
      - kafka
      - user-service
      - api-gateway

  redis:
    image: redis:latest
    container_name: redis_main_container
    ports:
      - "6379:6379"
    volumes:
      - redis_main_data:/data
    networks:
      - microservices-network

  redis_presence:
    image: redis:latest
    container_name: redis_presence_container
    ports:
      - "6380:6379"
    volumes:
      - redis_presence_data:/data
    networks:
      - microservices-network

  auth_user_friends_db:
    image: postgres:17
    container_name: auth_user_friends_db
    environment:
      - POSTGRES_DB=${DB_USER_NAME}
      - POSTGRES_USER=${DB_USER_USERNAME}
      - POSTGRES_PASSWORD=${DB_USER_PASSWORD}
      - POSTGRES_ADMIN_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - auth_db_data:/var/lib/postgresql/data
      - ./user-service:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices-network

  chats_db:
    image: postgres:17
    container_name: chats_db
    environment:
      - POSTGRES_DB=${DB_CHATS_NAME}
      - POSTGRES_USER=${DB_CHATS_USERNAME}
      - POSTGRES_PASSWORD=${DB_CHATS_PASSWORD}
      - POSTGRES_ADMIN_PASSWORD=${POSTGRES_ADMIN_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - chats_db_data:/var/lib/postgresql/data
      - ./chat-service:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: ${CLUSTER_ID}
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kraft
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      LOGGING_LEVEL_COM_PROVECTUS: DEBUG
    networks:
      - microservices-network

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Creating topics...'
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user-presence-events --partitions 6 --replication-factor 1
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic typing-notification-events --partitions 6 --replication-factor 1
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic auth-events --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic device-status-events --partitions 3 --replication-factor 1

        echo 'Topics created:'
        kafka-topics --bootstrap-server kafka:29092 --list
      "

    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  auth_db_data:
  chats_db_data:
  redis_main_data:
  redis_presence_data:
  kafka_data: